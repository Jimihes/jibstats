rename(gvkey = GVKEY, fyear = YEAR)
dsCase <- left_join(dsCase, Execu, by=c("gvkey", "fyear"))
# Toevoegen NIBI (net income before impairment) en lagNIBI kolommen
dsCase <- dsCase %>% group_by(gvkey) %>%
mutate(NIBI = ni + gdwlia,
lagNIBI = lag(NIBI),
lagNIBI = replace(lagNIBI, which((fyear-lag(fyear)) != 1),NA)) %>%
ungroup()
# Verwijderen van rijen met negatieve, 0 of onbekende goodwill
dsCase <- dsCase[-which(dsCase$gdwl <= 0),]
dsCase <- dsCase[!is.na(dsCase$gdwl),]
# Toevoegen laggdwl kolom
dsCase <- dsCase %>% group_by(gvkey) %>%
mutate(laggdwl = lag(gdwl),
laggdwl = replace(laggdwl, which((fyear-lag(fyear)) != 1),NA)) %>%
ungroup()
# Verwijderen van rijen met positieve impairments, hogere impairments dan laggdwl en onbekende lagGDWL
dsCase <- dsCase[-which(dsCase$gdwlip > 0),]
dsCase <- dsCase[-which(abs(dsCase$gdwlip) > dsCase$laggdwl),]
# dsCase <- dsCase[!is.na(dsCase$laggdwl),]
# Vervangen waarden 0 die zullen worden gedeeld in NA
dsCase$lagAT <- replace(dsCase$lagAT, dsCase$lagAT == 0, NA)
dsCase$csho <- replace(dsCase$csho, dsCase$csho == 0, NA)
dsCase$prcc_f <- replace(dsCase$prcc_f, dsCase$prcc_f == 0, NA)
# Variabelen aanmaken
dsCase <- dsCase %>%
mutate(GDWLDEC = ifelse(gdwlip == 0,0,1),
GDWLIMP = abs(gdwlip)/lagAT,
BM = (ceq + gdwlia) / (csho * prcc_f),
CEO_chg = ifelse((datadate.x - BECAMECEO) < 365 * 2, 1,0),
EXTERNAL = ifelse(BECAMECEO == JOINED_CO ,1,0 ),
TENURE = (datadate.x - BECAMECEO) / 365,
GDWLA = laggdwl / lagAT,
SIZE = log10(lagAT),
OCF = (oancf - lagOANCF)/lagAT
)
dsCase<- dsCase %>%
rename(COMP = bonusratio,INDUSTRY = SIC2)
# Verwijden oservaties zonder nuttige informatie (alle kolommen NA)
k <- c("BM","SALEGR","OCF", "ROA", "TENURE","IND_BOARD", "SHR_EXC",
"COMP", "Leverage", "GDWLA", "SIZE", "CEO_chg", "EXTERNAL")
ind <- rowSums(is.na(dsCase[k])) == ncol(dsCase[k])
dsCase <- dsCase[!ind,]
# Overige variabelen aanmaken (BATH en SMOOTH bevatten mediaan, dus final sample nodig)
bath = dsCase %>% filter((NIBI -lagNIBI) /lagAT<0) %>%
mutate(BATH = if_else(((NIBI -lagNIBI) /lagAT)< median((NIBI -lagNIBI) /lagAT,
na.rm = TRUE), (NIBI-lagNIBI)/lagAT, 0),
dBATH = if_else(((NIBI -lagNIBI) /lagAT)< median((NIBI -lagNIBI) /lagAT,
na.rm = TRUE), 1, 0)) %>%
select(gvkey, fyear,BATH, dBATH)
dsCase <- left_join(dsCase, bath, by=c("gvkey", "fyear"))
dsCase[is.na(dsCase$BATH),"BATH"] <-0
dsCase[is.na(dsCase$lagAT), "BATH"] <- NA
smooth <- dsCase %>% filter((NIBI -lagNIBI) /lagAT>0) %>%
mutate(SMOOTH = if_else(((NIBI -lagNIBI) /lagAT)> median((NIBI -lagNIBI) /lagAT,
na.rm = TRUE), (NIBI-lagNIBI)/lagAT, 0),
dSMOOTH = if_else(((NIBI -lagNIBI) /lagAT)> median((NIBI -lagNIBI) /lagAT,
na.rm = TRUE), 1, 0)) %>% select(gvkey, fyear,SMOOTH, dSMOOTH)
dsCase <- left_join(dsCase, smooth, by=c("gvkey", "fyear"))
dsCase[is.na(dsCase$SMOOTH),"SMOOTH"] <-0
dsCase[is.na(dsCase$lagAT), "SMOOTH"] <- NA
write.table(dsCase, file = "dsCase.csv")
# Verwijden oservaties zonder nuttige informatie (alle kolommen NA)
# k <- c("BM","SALEGR","OCF", "ROA", "Leverage", "GDWLA", "SIZE", "GDWLIMP", "GDWLDEC")
# k <- c("TENURE", "SHR_EXC", "COMP", "CEO_chg", "EXTERNAL")
# k <- c("IND_BOARD")
# ind <- rowSums(is.na(dsCase[k])) == ncol(dsCase[k])
# dsCase <- dsCase[!ind,]
# length(unique(dsCase$gvkey))
#----------------------------------------------------------
# 3. Tables and vizs
#----------------------------------------------------------
# Factor
dsCase$SIC1[dsCase$INDUSTRY < 10] = "A"
dsCase$SIC1[dsCase$INDUSTRY >= 10] = "B"
dsCase$SIC1[dsCase$INDUSTRY >= 15] = "C"
dsCase$SIC1[dsCase$INDUSTRY >= 20] = "D"
dsCase$SIC1[dsCase$INDUSTRY >= 40] = "E"
dsCase$SIC1[dsCase$INDUSTRY >= 50] = "F"
dsCase$SIC1[dsCase$INDUSTRY >= 52] = "G"
dsCase$SIC1[dsCase$INDUSTRY >= 70] = "I"
dsCase$SIC1[dsCase$INDUSTRY >= 99] = "K"
dsCase$f.INDUSTRY <-   factor(dsCase$SIC1, labels = c("A", "B", "C", "D", "E", "F",
"G", "I", "K"))
levels(dsCase$f.INDUSTRY)
dsCase$f.YEAR <-   factor(dsCase$fyear, labels = c("2004","2005", "2006", "2007","2008",
"2009", "2010", "2011", "2012", "2013",
"2014", "2015", "2016", "2017", "2018"))
# Probit
p1 <- glm(model1.1, data=dsCase, family = binomial(link = "probit"))
p2 <- glm(model1.2, data=dsCase, family = binomial(link = "probit"))
# Regressiemodellen
model1.1 <- GDWLDEC ~ BM + SALEGR + OCF + ROA + BATH + SMOOTH +
CEO_chg + EXTERNAL + IND_BOARD + SHR_EXC + COMP + Leverage + GDWLA + SIZE
model1.2 <-  GDWLDEC ~ BM + SALEGR + OCF + ROA + BATH + SMOOTH +
TENURE + I(TENURE^2) + IND_BOARD + SHR_EXC + COMP + Leverage + GDWLA + SIZE
model1.3 <- GDWLDEC ~ BM + SALEGR + OCF + ROA + BATH + SMOOTH +
CEO_chg + EXTERNAL + IND_BOARD + SHR_EXC + COMP + Leverage + GDWLA + SIZE + f.INDUSTRY + f.YEAR
model1.4 <-  GDWLDEC ~ BM + SALEGR + OCF + ROA + BATH + SMOOTH +
TENURE + I(TENURE^2) + IND_BOARD + SHR_EXC + COMP + Leverage + GDWLA + SIZE + f.INDUSTRY + f.YEAR
# Probit
p1 <- glm(model1.1, data=dsCase, family = binomial(link = "probit"))
p2 <- glm(model1.2, data=dsCase, family = binomial(link = "probit"))
p3 <- glm(model1.3, data=dsCase, family = binomial(link = "probit"))
p4 <- glm(model1.4, data=dsCase, family = binomial(link = "probit"))
# Lijst met z scores, die se gaan vervangen in de ouput
se.z <- list(summary(p1)$coefficients[,3], summary(p2)$coefficients[,3],
summary(p3)$coefficients[,3], summary(p4)$coefficients[,3])
summary(p1)
stargazer(p1, p2, p3, p4, se = se.z,  no.space=TRUE, align=TRUE, type="html", out="Probit.doc")
modelmaker <- function(vars,method="OLS", dep = vars[1], name = "", quadr =""){
if (quadr != ""){
quadr <- c(quadr)
ls <- []
for (i in quadr){
j <- paste0("I(", i, ")")
ls <- c(ls, j)
}
vars <<- c(vars, ls)
}}
modelmaker <- function(vars,method="OLS", dep = vars[1], name = "", quadr =""){
if (quadr != ""){
quadr <- c(quadr)
ls <- []
for (i in quadr){
j <- paste0("I(", i, ")")
ls <- c(ls, j)
}
vars <<- c(vars, ls)
}}
modelmaker <- function(vars,method="OLS", dep = vars[1], name = "", quadr =""){
if (quadr != ""){
quadr <- c(quadr)
ls <- c()
for (i in quadr){
j <- paste0("I(", i, ")")
ls <- c(ls, j)
}
vars <<- c(vars, ls)
}}
vars <- c(a, b, c, d)
vars <- c(letters[1:4])
vars
modelmaker(vars = vars, quadr = "e")
vars
vars[1]
list("a":"b")
list("a";"b")
list("a","b")
modelmaker <- function(vars,method="OLS", dep = vars[1], name = "", quadr =""){
if (quadr != ""){
quadr <- c(quadr)
ls <- c()
for (i in quadr){
j <- paste0("I(", i, "^2)")
vars <<- c(vars, j)
}}
newmodel <- paste0(dep, " ~ ")
assign(x="newmodel", value = formula(paste0(newmodel,
paste0(vars[2:length(vars)], collapse = " + "))),
pos = 1)
print(newmodel)
if (method == "OLS"){
newmodel <- lm(newmodel, data = dsCase)
}else if (method == "probit"){
newmodel <- glm(newmodel, data=dsCase, family = binomial(link = "probit"))
}else if (method == "tobit"){}
if(name == ""){
name == method
}
stargazer(newmodel, out = paste0(name,".doc"), summary = FALSE, type = "html")
return(newmodel)
}
k <- c("GDWLDEC", "BM", "SALEGR", "OCF", "BATH", "SMOOTH", "CEO_chg", "IND_BOARD", "SHR_EXC", "COMP", "Leverage", "GDWLA", "SIZE")
modelmaker(k)
newmodel
lm(newmodel, data = dsCase)
modelmaker <- function(vars,method="OLS", dep = vars[1], name = "", quadr =""){
if (quadr != ""){
quadr <- c(quadr)
ls <- c()
for (i in quadr){
j <- paste0("I(", i, "^2)")
vars <<- c(vars, j)
}}
newformula <- paste0(dep, " ~ ")
assign(x="newformula", value = formula(paste0(newformula,
paste0(vars[2:length(vars)], collapse = " + "))),
pos = 1)
print(newformula)
if (method == "OLS"){
newmodel <- lm(newformula, data = dsCase)
}else if (method == "probit"){
newmodel <- glm(newformula, data=dsCase, family = binomial(link = "probit"))
}else if (method == "tobit"){}
if(name == ""){
name == method
}
stargazer(newmodel, out = paste0(name,".doc"), summary = FALSE, type = "html")
return(newmodel)
}
lm(newmodel, data = dsCase)
modelmaker(k)
k <- c("GDWLIMP", "BM", "SALEGR", "OCF", "BATH", "SMOOTH", "CEO_chg", "IND_BOARD", "SHR_EXC", "COMP", "Leverage", "GDWLA", "SIZE")
modelmaker(k)
newformula
modelmaker <- function(vars,method="OLS", dep = vars[1], name = "", quadr =""){
if (quadr != ""){
quadr <- c(quadr)
ls <- c()
for (i in quadr){
j <- paste0("I(", i, "^2)")
vars <<- c(vars, j)
}}
newformula <- paste0(dep, " ~ ")
print(newformula)
assign(x="newformula", value = formula(paste0(newformula,
paste0(vars[2:length(vars)], collapse = " + "))),
pos = 1)
print(newformula)
if (method == "OLS"){
newmodel <- lm(newformula, data = dsCase)
}else if (method == "probit"){
newmodel <- glm(newformula, data=dsCase, family = binomial(link = "probit"))
}else if (method == "tobit"){}
if(name == ""){
name == method
}
stargazer(newmodel, out = paste0(name,".doc"), summary = FALSE, type = "html")
return(newmodel)
}
newformula
modelmaker(k)
modelmaker <- function(vars,method="OLS", dep = vars[1], name = "", quadr =""){
if (quadr != ""){
quadr <- c(quadr)
ls <- c()
for (i in quadr){
j <- paste0("I(", i, "^2)")
vars <<- c(vars, j)
}}
newformula <- paste0(dep, " ~ ")
print(newformula)
assign(x="newformula", value = formula(paste0(newformula,
paste0(vars[2:length(vars)], collapse = " + "))),
pos = 1)
print(newformula)
if (method == "OLS"){
newmodel <- lm(formula = newformula, data = dsCase)
}else if (method == "probit"){
newmodel <- glm(newformula, data=dsCase, family = binomial(link = "probit"))
}else if (method == "tobit"){}
if(name == ""){
name == method
}
stargazer(newmodel, out = paste0(name,".doc"), summary = FALSE, type = "html")
return(newmodel)
}
modelmaker(k)
newformula
rm("newformula")
newformula
modelmaker <- function(vars,method="OLS", dep = vars[1], name = "", quadr =""){
if (quadr != ""){
quadr <- c(quadr)
ls <- c()
for (i in quadr){
j <- paste0("I(", i, "^2)")
vars <<- c(vars, j)
}}
newformula <- paste0(dep, " ~ ")
print(newformula)
assign(x="newformula", value = formula(paste0(newformula,
paste0(vars[2:length(vars)], collapse = " + "))),
pos = 1)
print(newformula)
if (method == "OLS"){
newmodel <- lm(formula = newformula, data = dsCase)
}else if (method == "probit"){
newmodel <- glm(newformula, data=dsCase, family = binomial(link = "probit"))
}else if (method == "tobit"){}
if(name == ""){
name == method
}
stargazer(newmodel, out = paste0(name,".doc"), summary = FALSE, type = "html")
return(newmodel)
}
newformula
modelmaker(k)
modelmaker <- function(vars,method="OLS", dep = vars[1], name = "", quadr =""){
if (quadr != ""){
quadr <- c(quadr)
ls <- c()
for (i in quadr){
j <- paste0("I(", i, "^2)")
vars <<- c(vars, j)
}}
newformula <- paste0(dep, " ~ ")
print(newformula)
assign(x="newformula", value = formula(paste0(newformula,
paste0(vars[2:length(vars)], collapse = " + "))),
pos = 1)
}
modelmaker(k)
vars
modelmaker(vars = k)
vars
newformula
class(newformula)
modelmaker <- function(vars,method="OLS", dep = vars[1], name = "", quadr =""){
if (quadr != ""){
quadr <- c(quadr)
ls <- c()
for (i in quadr){
j <- paste0("I(", i, "^2)")
vars <<- c(vars, j)
}}
newformula <- paste0(dep, " ~ ")
print(newformula)
newformula <<-  value = formula(paste0(newformula,
paste0(vars[2:length(vars)], collapse = " + ")))}
modelmaker(vars = k)
modelmaker <- function(vars,method="OLS", dep = vars[1], name = "", quadr =""){
if (quadr != ""){
quadr <- c(quadr)
ls <- c()
for (i in quadr){
j <- paste0("I(", i, "^2)")
vars <<- c(vars, j)
}}
newformula <- paste0(dep, " ~ ")
print(newformula)
newformula <<-  formula(paste0(newformula,paste0(vars[2:length(vars)], collapse = " + ")))
print(newformula)}
modelmaker(vars = k)
newformula
print(class(newformula))}
modelmaker <- function(vars,method="OLS", dep = vars[1], name = "", quadr =""){
if (quadr != ""){
quadr <- c(quadr)
ls <- c()
for (i in quadr){
j <- paste0("I(", i, "^2)")
vars <<- c(vars, j)
}}
newformula <- paste0(dep, " ~ ")
print(newformula)
newformula <<-  formula(paste0(newformula,paste0(vars[2:length(vars)], collapse = " + ")))
print(class(newformula))}
modelmaker(vars = k)
rm("newformula")
modelmaker(vars = k)
newformula
modelmaker <- function(vars,method="OLS", dep = vars[1], name = "", quadr =""){
if (quadr != ""){
quadr <- c(quadr)
ls <- c()
for (i in quadr){
j <- paste0("I(", i, "^2)")
vars <<- c(vars, j)
}}
newformula <- paste0(dep, " ~ ")
print(newformula)
newformula <<-  formula(paste0(newformula,paste0(vars[2:length(vars)], collapse = " + ")))
pause(1)
print(class(newformula))}
modelmaker(vars = k)
modelmaker <- function(vars,method="OLS", dep = vars[1], name = "", quadr =""){
if (quadr != ""){
quadr <- c(quadr)
ls <- c()
for (i in quadr){
j <- paste0("I(", i, "^2)")
vars <<- c(vars, j)
}}
newformula <- paste0(dep, " ~ ")
print(newformula)
newformula <<-  formula(paste0(newformula,paste0(vars[2:length(vars)], collapse = " + ")))
Sys.sleep(1)
print(class(newformula))}
modelmaker(vars = k)
modelmaker <- function(vars,method="OLS", dep = vars[1], name = "", quadr =""){
if (quadr != ""){
quadr <- c(quadr)
ls <- c()
for (i in quadr){
j <- paste0("I(", i, "^2)")
vars <<- c(vars, j)
}}
newformula <- paste0(dep, " ~ ")
print(newformula)
newformula <<-  formula(paste0(newformula,paste0(vars[2:length(vars)], collapse = " + ")))
Sys.sleep(1)
print(newformula)}
modelmaker(vars = k)
print(newformula)
modelmaker <- function(vars,method="OLS", dep = vars[1], name = "", quadr =""){
if (quadr != ""){
quadr <- c(quadr)
ls <- c()
for (i in quadr){
j <- paste0("I(", i, "^2)")
vars <<- c(vars, j)
}}
newformula <- paste0(dep, " ~ ")
print(newformula)
newformula <-  formula(paste0(newformula,paste0(vars[2:length(vars)], collapse = " + ")))
Sys.sleep(1)
print(newformula)}
modelmaker(vars = k)
modelmaker <- function(vars,method="OLS", dep = vars[1], name = "", quadr =""){
if (quadr != ""){
quadr <- c(quadr)
ls <- c()
for (i in quadr){
j <- paste0("I(", i, "^2)")
vars <<- c(vars, j)
}}
newformula <- paste0(dep, " ~ ")
newformula <-  formula(paste0(newformula,paste0(vars[2:length(vars)], collapse = " + ")))
if (method == "OLS"){
newmodel <- lm(formula = newformula, data = dsCase)
}else if (method == "probit"){
newmodel <- glm(newformula, data=dsCase, family = binomial(link = "probit"))
}else if (method == "tobit"){}
if(name == ""){
name == method
}
stargazer(newmodel, out = paste0(name,".doc"), summary = FALSE, type = "html")
return(newmodel)
}
modelmaker(k)
modelmaker <- function(vars, method="OLS", dep = vars[1], name = "", quadr =""){
if (quadr != ""){
quadr <- c(quadr)
ls <- c()
for (i in quadr){
j <- paste0("I(", i, "^2)")
vars <<- c(vars, j)
}}
newformula <- paste0(dep, " ~ ")
newformula <-  formula(paste0(newformula,paste0(vars[2:length(vars)], collapse = " + ")))
if (method == "OLS"){
newmodel <- lm(formula = newformula, data = dsCase)
}else if (method == "probit"){
newmodel <- glm(newformula, data=dsCase, family = binomial(link = "probit"))
}else if (method == "tobit"){}
if(name == ""){
name == paste0(method, "_model")
}
stargazer(newmodel, out = paste0(name,".doc"), summary = FALSE, type = "html")
return(newmodel)
}
modelmaker(k)
tmp <- modelmaker(k)
View(tmp)
tmp <- modelmaker(k)
lm(k, dsCase)
modelmaker <- function(vars, method="OLS", dep = vars[1], name = "", quadr =""){
if (quadr != ""){
quadr <- c(quadr)
ls <- c()
for (i in quadr){
j <- paste0("I(", i, "^2)")
vars <<- c(vars, j)
}}
newformula <- paste0(dep, " ~ ")
newformula <-  formula(paste0(newformula,paste0(vars[2:length(vars)], collapse = " + ")))
print(newformula)
if (method == "OLS"){
newmodel <- lm(formula = newformula, data = dsCase)
}else if (method == "probit"){
newmodel <- glm(newformula, data=dsCase, family = binomial(link = "probit"))
}else if (method == "tobit"){}
if(name == ""){
name == paste0(method, "_model")
}
stargazer(newmodel, out = paste0(name,".doc"), summary = FALSE, type = "html")
return(newmodel)
}
modelmaker(k)
modelmaker <- function(vars, method="OLS", dep = vars[1], name = "", quadr =""){
if (quadr != ""){
quadr <- c(quadr)
ls <- c()
for (i in quadr){
j <- paste0("I(", i, "^2)")
vars <<- c(vars, j)
}}
newformula <- paste0(dep, " ~ ")
newformula <-  formula(paste0(newformula,paste0(vars[2:length(vars)], collapse = " + ")))
print(newformula)
if (method == "OLS"){
newmodel <- lm(formula = newformula, data = dsCase)
}else if (method == "probit"){
newmodel <- glm(newformula, data=dsCase, family = binomial(link = "probit"))
}else if (method == "tobit"){}
if(name == ""){
name == paste0(method, "_model")
}
sink("NUL")
stargazer(newmodel, out = paste0(name,".doc"), summary = FALSE, type = "html")
sink()
return(newmodel)
}
modelmaker(k)
setwd("./jibstats")
document()
library(roxygen2)
document()
library(devtools)
document()
